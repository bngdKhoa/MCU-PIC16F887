CCS PCM C Compiler, Version 5.015, 5967               14-Oct-23 21:14

               Filename:   D:\Set up\VXL\Baitap07\HienthiLCD_BTAP07.lst

               ROM used:   620 words (8%)
                           Largest free fragment is 2048
               RAM used:   8 (2%) at main() level
                           22 (6%) worst case
               Stack used: 5 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   208
0003:  NOP
.................... # INCLUDE <16F887.H>  
.................... //////////// Standard Header file for the PIC16F887 device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F887 
0004:  DATA 20,21
0005:  DATA C1,27
0006:  DATA 20,27
0007:  DATA C7,27
0008:  DATA 43,10
0009:  DATA C4,20
000A:  DATA CE,23
000B:  DATA A0,25
000C:  DATA C8,27
000D:  DATA 41,10
000E:  DATA 00,00
*
0166:  MOVF   0B,W
0167:  MOVWF  23
0168:  BCF    0B.7
0169:  BSF    03.5
016A:  BSF    03.6
016B:  BSF    0C.7
016C:  BSF    0C.0
016D:  NOP
016E:  NOP
016F:  BCF    03.5
0170:  BCF    03.6
0171:  BTFSC  23.7
0172:  BSF    0B.7
0173:  BSF    03.6
0174:  MOVF   0C,W
0175:  ANDLW  7F
0176:  BTFSC  03.2
0177:  GOTO   1BA
0178:  BCF    03.6
0179:  MOVWF  23
017A:  BSF    03.6
017B:  MOVF   0D,W
017C:  BCF    03.6
017D:  MOVWF  24
017E:  BSF    03.6
017F:  MOVF   0F,W
0180:  BCF    03.6
0181:  MOVWF  25
0182:  MOVF   23,W
0183:  MOVWF  26
0184:  CALL   13A
0185:  MOVF   24,W
0186:  BSF    03.6
0187:  MOVWF  0D
0188:  BCF    03.6
0189:  MOVF   25,W
018A:  BSF    03.6
018B:  MOVWF  0F
018C:  BCF    03.6
018D:  MOVF   0B,W
018E:  MOVWF  26
018F:  BCF    0B.7
0190:  BSF    03.5
0191:  BSF    03.6
0192:  BSF    0C.7
0193:  BSF    0C.0
0194:  NOP
0195:  NOP
0196:  BCF    03.5
0197:  BCF    03.6
0198:  BTFSC  26.7
0199:  BSF    0B.7
019A:  BSF    03.6
019B:  RLF    0C,W
019C:  RLF    0E,W
019D:  ANDLW  7F
019E:  BTFSC  03.2
019F:  GOTO   1BA
01A0:  BCF    03.6
01A1:  MOVWF  23
01A2:  BSF    03.6
01A3:  MOVF   0D,W
01A4:  BCF    03.6
01A5:  MOVWF  24
01A6:  BSF    03.6
01A7:  MOVF   0F,W
01A8:  BCF    03.6
01A9:  MOVWF  25
01AA:  MOVF   23,W
01AB:  MOVWF  26
01AC:  CALL   13A
01AD:  MOVF   24,W
01AE:  BSF    03.6
01AF:  MOVWF  0D
01B0:  BCF    03.6
01B1:  MOVF   25,W
01B2:  BSF    03.6
01B3:  MOVWF  0F
01B4:  INCF   0D,F
01B5:  BTFSC  03.2
01B6:  INCF   0F,F
01B7:  BCF    03.6
01B8:  GOTO   166
01B9:  BSF    03.6
01BA:  BCF    03.6
01BB:  BCF    0A.3
01BC:  BCF    0A.4
01BD:  GOTO   230 (RETURN)
01BE:  MOVF   26,W
01BF:  CLRF   78
01C0:  SUBWF  25,W
01C1:  BTFSC  03.0
01C2:  GOTO   1C6
01C3:  MOVF   25,W
01C4:  MOVWF  77
01C5:  GOTO   1D2
01C6:  CLRF   77
01C7:  MOVLW  08
01C8:  MOVWF  27
01C9:  RLF    25,F
01CA:  RLF    77,F
01CB:  MOVF   26,W
01CC:  SUBWF  77,W
01CD:  BTFSC  03.0
01CE:  MOVWF  77
01CF:  RLF    78,F
01D0:  DECFSZ 27,F
01D1:  GOTO   1C9
01D2:  RETURN
01D3:  MOVF   78,W
01D4:  MOVF   23,W
01D5:  MOVWF  25
01D6:  MOVLW  64
01D7:  MOVWF  26
01D8:  CALL   1BE
01D9:  MOVF   77,W
01DA:  MOVWF  23
01DB:  MOVF   78,W
01DC:  MOVLW  30
01DD:  BTFSS  03.2
01DE:  GOTO   1E6
01DF:  BTFSS  24.1
01E0:  GOTO   1ED
01E1:  BTFSC  24.3
01E2:  GOTO   1ED
01E3:  BTFSC  24.4
01E4:  MOVLW  20
01E5:  GOTO   1E9
01E6:  BCF    24.3
01E7:  BCF    24.4
01E8:  BSF    24.0
01E9:  ADDWF  78,F
01EA:  MOVF   78,W
01EB:  MOVWF  26
01EC:  CALL   13A
01ED:  MOVF   23,W
01EE:  MOVWF  25
01EF:  MOVLW  0A
01F0:  MOVWF  26
01F1:  CALL   1BE
01F2:  MOVF   77,W
01F3:  MOVWF  23
01F4:  MOVF   78,W
01F5:  MOVLW  30
01F6:  BTFSS  03.2
01F7:  GOTO   1FE
01F8:  BTFSC  24.3
01F9:  GOTO   202
01FA:  BTFSS  24.0
01FB:  GOTO   202
01FC:  BTFSC  24.4
01FD:  MOVLW  20
01FE:  ADDWF  78,F
01FF:  MOVF   78,W
0200:  MOVWF  26
0201:  CALL   13A
0202:  MOVLW  30
0203:  ADDWF  23,F
0204:  MOVF   23,W
0205:  MOVWF  26
0206:  CALL   13A
0207:  RETURN
....................  
.................... #list 
....................  
.................... # FUSES HS  
.................... # USE DELAY (CLOCK = 20M) 
*
000F:  MOVLW  28
0010:  MOVWF  04
0011:  BCF    03.7
0012:  MOVF   00,W
0013:  BTFSC  03.2
0014:  GOTO   022
0015:  MOVLW  06
0016:  MOVWF  78
0017:  CLRF   77
0018:  DECFSZ 77,F
0019:  GOTO   018
001A:  DECFSZ 78,F
001B:  GOTO   017
001C:  MOVLW  7B
001D:  MOVWF  77
001E:  DECFSZ 77,F
001F:  GOTO   01E
0020:  DECFSZ 00,F
0021:  GOTO   015
0022:  RETURN
.................... # DEFINE LCD_RS_PIN  PIN_E0 
.................... # DEFINE LCD_RW_PIN  PIN_E1 
.................... # DEFINE LCD_ENABLE_PIN PIN_E2 
.................... # DEFINE LCD_DATA4   PIN_D4 
.................... # DEFINE LCD_DATA5   PIN_D5 
.................... # DEFINE LCD_DATA6   PIN_D6 
.................... # DEFINE LCD_DATA7   PIN_D7 
.................... # INCLUDE <LCD.C> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
008C:  BSF    08.4
....................    output_float(LCD_DATA5); 
008D:  BSF    08.5
....................    output_float(LCD_DATA6); 
008E:  BSF    08.6
....................    output_float(LCD_DATA7); 
008F:  BSF    08.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0090:  BCF    03.5
0091:  BSF    09.1
0092:  BSF    03.5
0093:  BCF    09.1
....................    delay_cycles(1); 
0094:  NOP
....................    lcd_output_enable(1); 
0095:  BCF    03.5
0096:  BSF    09.2
0097:  BSF    03.5
0098:  BCF    09.2
....................    delay_cycles(1); 
0099:  NOP
....................    high = lcd_read_nibble(); 
009A:  BCF    03.5
009B:  CALL   053
009C:  MOVF   78,W
009D:  MOVWF  2E
....................        
....................    lcd_output_enable(0); 
009E:  BCF    09.2
009F:  BSF    03.5
00A0:  BCF    09.2
....................    delay_cycles(1); 
00A1:  NOP
....................    lcd_output_enable(1); 
00A2:  BCF    03.5
00A3:  BSF    09.2
00A4:  BSF    03.5
00A5:  BCF    09.2
....................    delay_us(1); 
00A6:  GOTO   0A7
00A7:  GOTO   0A8
00A8:  NOP
....................    low = lcd_read_nibble(); 
00A9:  BCF    03.5
00AA:  CALL   053
00AB:  MOVF   78,W
00AC:  MOVWF  2D
....................        
....................    lcd_output_enable(0); 
00AD:  BCF    09.2
00AE:  BSF    03.5
00AF:  BCF    09.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00B0:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00B1:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00B2:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00B3:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00B4:  BCF    03.5
00B5:  SWAPF  2E,W
00B6:  MOVWF  77
00B7:  MOVLW  F0
00B8:  ANDWF  77,F
00B9:  MOVF   77,W
00BA:  IORWF  2D,W
00BB:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
0053:  CLRF   2F
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
0054:  BSF    03.5
0055:  BSF    08.4
0056:  MOVLW  00
0057:  BCF    03.5
0058:  BTFSC  08.4
0059:  MOVLW  01
005A:  IORWF  2F,F
....................    n |= input(LCD_DATA5) << 1; 
005B:  BSF    03.5
005C:  BSF    08.5
005D:  MOVLW  00
005E:  BCF    03.5
005F:  BTFSC  08.5
0060:  MOVLW  01
0061:  MOVWF  77
0062:  BCF    03.0
0063:  RLF    77,F
0064:  MOVF   77,W
0065:  IORWF  2F,F
....................    n |= input(LCD_DATA6) << 2; 
0066:  BSF    03.5
0067:  BSF    08.6
0068:  MOVLW  00
0069:  BCF    03.5
006A:  BTFSC  08.6
006B:  MOVLW  01
006C:  MOVWF  77
006D:  RLF    77,F
006E:  RLF    77,F
006F:  MOVLW  FC
0070:  ANDWF  77,F
0071:  MOVF   77,W
0072:  IORWF  2F,F
....................    n |= input(LCD_DATA7) << 3; 
0073:  BSF    03.5
0074:  BSF    08.7
0075:  MOVLW  00
0076:  BCF    03.5
0077:  BTFSC  08.7
0078:  MOVLW  01
0079:  MOVWF  77
007A:  RLF    77,F
007B:  RLF    77,F
007C:  RLF    77,F
007D:  MOVLW  F8
007E:  ANDWF  77,F
007F:  MOVF   77,W
0080:  IORWF  2F,F
....................     
....................    return(n); 
0081:  MOVF   2F,W
0082:  MOVWF  78
....................   #else 
0083:  RETURN
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
0023:  BTFSC  2E.0
0024:  GOTO   027
0025:  BCF    08.4
0026:  GOTO   028
0027:  BSF    08.4
0028:  BSF    03.5
0029:  BCF    08.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
002A:  BCF    03.5
002B:  BTFSC  2E.1
002C:  GOTO   02F
002D:  BCF    08.5
002E:  GOTO   030
002F:  BSF    08.5
0030:  BSF    03.5
0031:  BCF    08.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
0032:  BCF    03.5
0033:  BTFSC  2E.2
0034:  GOTO   037
0035:  BCF    08.6
0036:  GOTO   038
0037:  BSF    08.6
0038:  BSF    03.5
0039:  BCF    08.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
003A:  BCF    03.5
003B:  BTFSC  2E.3
003C:  GOTO   03F
003D:  BCF    08.7
003E:  GOTO   040
003F:  BSF    08.7
0040:  BSF    03.5
0041:  BCF    08.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
0042:  NOP
....................    lcd_output_enable(1); 
0043:  BCF    03.5
0044:  BSF    09.2
0045:  BSF    03.5
0046:  BCF    09.2
....................    delay_us(2); 
0047:  MOVLW  02
0048:  MOVWF  77
0049:  DECFSZ 77,F
004A:  GOTO   049
004B:  GOTO   04C
004C:  NOP
....................    lcd_output_enable(0); 
004D:  BCF    03.5
004E:  BCF    09.2
004F:  BSF    03.5
0050:  BCF    09.2
0051:  BCF    03.5
0052:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0084:  BSF    03.5
0085:  BCF    09.2
....................    lcd_rs_tris(); 
0086:  BCF    09.0
....................    lcd_rw_tris(); 
0087:  BCF    09.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0088:  BCF    03.5
0089:  BCF    09.0
008A:  BSF    03.5
008B:  BCF    09.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00BC:  MOVF   78,W
00BD:  MOVWF  2D
00BE:  BTFSS  2D.7
00BF:  GOTO   0C2
00C0:  BSF    03.5
00C1:  GOTO   08C
....................    lcd_output_rs(address); 
00C2:  MOVF   2B,F
00C3:  BTFSS  03.2
00C4:  GOTO   0C7
00C5:  BCF    09.0
00C6:  GOTO   0C8
00C7:  BSF    09.0
00C8:  BSF    03.5
00C9:  BCF    09.0
....................    delay_cycles(1); 
00CA:  NOP
....................    lcd_output_rw(0); 
00CB:  BCF    03.5
00CC:  BCF    09.1
00CD:  BSF    03.5
00CE:  BCF    09.1
....................    delay_cycles(1); 
00CF:  NOP
....................    lcd_output_enable(0); 
00D0:  BCF    03.5
00D1:  BCF    09.2
00D2:  BSF    03.5
00D3:  BCF    09.2
....................    lcd_send_nibble(n >> 4); 
00D4:  BCF    03.5
00D5:  SWAPF  2C,W
00D6:  MOVWF  2D
00D7:  MOVLW  0F
00D8:  ANDWF  2D,F
00D9:  MOVF   2D,W
00DA:  MOVWF  2E
00DB:  CALL   023
....................    lcd_send_nibble(n & 0xf); 
00DC:  MOVF   2C,W
00DD:  ANDLW  0F
00DE:  MOVWF  2D
00DF:  MOVWF  2E
00E0:  CALL   023
00E1:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
00E2:  MOVLW  28
00E3:  MOVWF  24
00E4:  MOVLW  0C
00E5:  MOVWF  25
00E6:  MOVLW  01
00E7:  MOVWF  26
00E8:  MOVLW  06
00E9:  MOVWF  27
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
00EA:  BCF    09.2
00EB:  BSF    03.5
00EC:  BCF    09.2
....................    lcd_output_rs(0); 
00ED:  BCF    03.5
00EE:  BCF    09.0
00EF:  BSF    03.5
00F0:  BCF    09.0
....................    lcd_output_rw(0); 
00F1:  BCF    03.5
00F2:  BCF    09.1
00F3:  BSF    03.5
00F4:  BCF    09.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00F5:  BCF    08.4
....................    output_drive(LCD_DATA5); 
00F6:  BCF    08.5
....................    output_drive(LCD_DATA6); 
00F7:  BCF    08.6
....................    output_drive(LCD_DATA7); 
00F8:  BCF    08.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
00F9:  BCF    09.2
....................    lcd_rs_tris(); 
00FA:  BCF    09.0
....................    lcd_rw_tris(); 
00FB:  BCF    09.1
....................  #endif 
....................      
....................    delay_ms(15); 
00FC:  MOVLW  0F
00FD:  BCF    03.5
00FE:  MOVWF  28
00FF:  CALL   00F
....................    for(i=1;i<=3;++i) 
0100:  MOVLW  01
0101:  MOVWF  23
0102:  MOVF   23,W
0103:  SUBLW  03
0104:  BTFSS  03.0
0105:  GOTO   10E
....................    { 
....................        lcd_send_nibble(3); 
0106:  MOVLW  03
0107:  MOVWF  2E
0108:  CALL   023
....................        delay_ms(5); 
0109:  MOVLW  05
010A:  MOVWF  28
010B:  CALL   00F
010C:  INCF   23,F
010D:  GOTO   102
....................    } 
....................     
....................    lcd_send_nibble(2); 
010E:  MOVLW  02
010F:  MOVWF  2E
0110:  CALL   023
....................    delay_ms(5); 
0111:  MOVLW  05
0112:  MOVWF  28
0113:  CALL   00F
....................    for(i=0;i<=3;++i) 
0114:  CLRF   23
0115:  MOVF   23,W
0116:  SUBLW  03
0117:  BTFSS  03.0
0118:  GOTO   125
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0119:  MOVLW  24
011A:  ADDWF  23,W
011B:  MOVWF  04
011C:  BCF    03.7
011D:  MOVF   00,W
011E:  MOVWF  28
011F:  CLRF   2B
0120:  MOVF   28,W
0121:  MOVWF  2C
0122:  CALL   084
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0123:  INCF   23,F
0124:  GOTO   115
0125:  BCF    0A.3
0126:  BCF    0A.4
0127:  GOTO   225 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
0128:  DECFSZ 28,W
0129:  GOTO   12B
012A:  GOTO   12E
....................       address=LCD_LINE_TWO; 
012B:  MOVLW  40
012C:  MOVWF  29
012D:  GOTO   12F
....................    else 
....................       address=0; 
012E:  CLRF   29
....................       
....................    address+=x-1; 
012F:  MOVLW  01
0130:  SUBWF  27,W
0131:  ADDWF  29,F
....................    lcd_send_byte(0,0x80|address); 
0132:  MOVF   29,W
0133:  IORLW  80
0134:  MOVWF  2A
0135:  CLRF   2B
0136:  MOVF   2A,W
0137:  MOVWF  2C
0138:  CALL   084
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0139:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
013A:  MOVF   26,W
013B:  XORLW  07
013C:  BTFSC  03.2
013D:  GOTO   148
013E:  XORLW  0B
013F:  BTFSC  03.2
0140:  GOTO   14D
0141:  XORLW  06
0142:  BTFSC  03.2
0143:  GOTO   155
0144:  XORLW  02
0145:  BTFSC  03.2
0146:  GOTO   15B
0147:  GOTO   160
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0148:  MOVLW  01
0149:  MOVWF  27
014A:  MOVWF  28
014B:  CALL   128
014C:  GOTO   165
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
014D:  CLRF   2B
014E:  MOVLW  01
014F:  MOVWF  2C
0150:  CALL   084
....................                      delay_ms(2); 
0151:  MOVLW  02
0152:  MOVWF  28
0153:  CALL   00F
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0154:  GOTO   165
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0155:  MOVLW  01
0156:  MOVWF  27
0157:  MOVLW  02
0158:  MOVWF  28
0159:  CALL   128
015A:  GOTO   165
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
015B:  CLRF   2B
015C:  MOVLW  10
015D:  MOVWF  2C
015E:  CALL   084
015F:  GOTO   165
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0160:  MOVLW  01
0161:  MOVWF  2B
0162:  MOVF   26,W
0163:  MOVWF  2C
0164:  CALL   084
....................      #endif 
....................    } 
0165:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... UNSIGNED INT8 GIO, PHUT, GIAY; 
.................... VOID MAIN () 
*
0208:  MOVF   03,W
0209:  ANDLW  1F
020A:  MOVWF  03
020B:  BSF    03.5
020C:  BSF    03.6
020D:  MOVF   09,W
020E:  ANDLW  C0
020F:  MOVWF  09
0210:  BCF    03.6
0211:  BCF    1F.4
0212:  BCF    1F.5
0213:  MOVLW  00
0214:  BSF    03.6
0215:  MOVWF  08
0216:  BCF    03.5
0217:  CLRF   07
0218:  CLRF   08
0219:  CLRF   09
021A:  BCF    03.7
.................... { 
....................    SET_TRIS_E (0); 
021B:  BSF    03.5
021C:  BCF    03.6
021D:  BCF    09.0
021E:  BCF    09.1
021F:  BCF    09.2
0220:  BCF    09.3
....................    SET_TRIS_D (0); 
0221:  MOVLW  00
0222:  MOVWF  08
....................    LCD_INIT (); 
0223:  BCF    03.5
0224:  GOTO   0E2
....................    LCD_GOTOXY (1,1); 
0225:  MOVLW  01
0226:  MOVWF  27
0227:  MOVWF  28
0228:  CALL   128
....................    LCD_PUTC (" BAO NGOC DANG KHOA "); 
0229:  MOVLW  04
022A:  BSF    03.6
022B:  MOVWF  0D
022C:  MOVLW  00
022D:  MOVWF  0F
022E:  BCF    03.6
022F:  GOTO   166
....................    FOR (GIO = 0; GIO < 24; GIO ++) 
0230:  CLRF   20
0231:  MOVF   20,W
0232:  SUBLW  17
0233:  BTFSS  03.0
0234:  GOTO   26B
....................       FOR (PHUT = 0; PHUT < 60; PHUT ++) 
0235:  CLRF   21
0236:  MOVF   21,W
0237:  SUBLW  3B
0238:  BTFSS  03.0
0239:  GOTO   269
....................          FOR (GIAY = 0; GIAY < 60; GIAY ++) 
023A:  CLRF   22
023B:  MOVF   22,W
023C:  SUBLW  3B
023D:  BTFSS  03.0
023E:  GOTO   267
....................          { 
....................             LCD_GOTOXY (6,2); 
023F:  MOVLW  06
0240:  MOVWF  27
0241:  MOVLW  02
0242:  MOVWF  28
0243:  CALL   128
....................             PRINTF (LCD_PUTC, "%02Uh %02Um %02Us", GIO, PHUT, GIAY); 
0244:  MOVF   20,W
0245:  MOVWF  23
0246:  MOVLW  01
0247:  MOVWF  24
0248:  CALL   1D3
0249:  MOVLW  68
024A:  MOVWF  26
024B:  CALL   13A
024C:  MOVLW  20
024D:  MOVWF  26
024E:  CALL   13A
024F:  MOVF   21,W
0250:  MOVWF  23
0251:  MOVLW  01
0252:  MOVWF  24
0253:  CALL   1D3
0254:  MOVLW  6D
0255:  MOVWF  26
0256:  CALL   13A
0257:  MOVLW  20
0258:  MOVWF  26
0259:  CALL   13A
025A:  MOVF   22,W
025B:  MOVWF  23
025C:  MOVLW  01
025D:  MOVWF  24
025E:  CALL   1D3
025F:  MOVLW  73
0260:  MOVWF  26
0261:  CALL   13A
....................             DELAY_MS (50); 
0262:  MOVLW  32
0263:  MOVWF  28
0264:  CALL   00F
0265:  INCF   22,F
0266:  GOTO   23B
0267:  INCF   21,F
0268:  GOTO   236
0269:  INCF   20,F
026A:  GOTO   231
....................          } 
.................... } 
026B:  SLEEP

Configuration Fuses:
   Word  1: 2FE2   HS NOWDT PUT MCLR NOPROTECT NOCPD BROWNOUT IESO FCMEN NOLVP NODEBUG
   Word  2: 3FFF   BORV40 NOWRT
